Executar em caso de problemas de execução do projeto:    

    Caso necessário, verificar o IP do computador pelo terminal com o comando:
    ipconfig

    Anotar o IP de rede e navegar no terminal até a pasta
    c:\windows\system32

    Executar o comando:
    setx /M REACT_NATIVE_PACKAGER_HOSTNAME <ip>


https://docs.expo.dev/develop/user-interface/splash-screen/#make-a-splash-image


Iniciando o projeto
npx create-expo-app rooster-interest
cd rooster-interest
npm i @react-navigation/native
npm i @react-navigation/bottom-tabs
npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar



package.json:
{
  "main": "expo-router/entry"
}



app.config:
{
  "scheme": "rooster-scheme"
}



Clique para criar um arquivo e digite: src\app\(tabs)\index.js:
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function Home() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home</Text>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    fontSize: 22,
  }
});



Alterar o arquivo splash.png da pasta assets



Alterar no arquivo app.json:
  "backgroundColor": "#000000"



npx expo start --localhost --android



Apagar o arquivo App.js



Criar dentro da pasta src uma pasta theme e na pasta um arquivo colors.js:
export const colors = {
    white: "#FFFFFF",
    black: "#000000",
    gray: {
        800: "#292929",
        700: "#4B4B4B",
        600: "#8E8E8E",
    }
}



Criar na pasta theme um arquivo fontFamily.js:
export const fontFamily = {
    regular: "",
    medium: "",
    bold: "",
}



Criar em theme um arquivo index.js:
import { colors } from "./colors";
import { fontFamily } from "./fontFamily";

export const theme = {
    colors,
    fontFamily,
}



Altere o (tabs)\index.js:
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { View, Text, StyleSheet } from 'react-native';

import { theme } from '../../theme';

export default function Home() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.black,
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: theme.colors.white,
    fontSize: 24
  }
});



Verificar as alterações em execução



Pare a execução do projeto (Ctrl + C) e execute no terminal:
npx expo install expo-font @expo-google-fonts/roboto

npx expo install react-native-gesture-handler react-native-reanimated

npm install -D @babel/plugin-transform-export-namespace-from



Alterar o arquivo babel.config.js:
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      "@babel/plugin-transform-export-namespace-from",
      "react-native-reanimated/plugin",
    ],
  };
};



Criar um arquivo _layout.js na pasta app:
import { Slot } from "expo-router";
import { StatusBar } from "react-native";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import * as SplashScreen from "expo-splash-screen";

import {
    useFonts,
    Roboto_400Regular,
    Roboto_500Medium,
    Roboto_700Bold
} from "@expo-google-fonts/roboto";

SplashScreen.preventAutoHideAsync();

export default function Layout() {
    const [fontsLoaded] = useFonts({
        Roboto_400Regular,
        Roboto_500Medium,
        Roboto_700Bold
    })

    if (fontsLoaded) {
        SplashScreen.hideAsync();
    }
    
    return (
        <GestureHandlerRootView style={{ flex: 1}}>
            <StatusBar barStyle="light-content" />
            {fontsLoaded && <Slot /> }
        </GestureHandlerRootView>
    )
}



Atualizar o código do arquivo fontFamily.cs:
export const fontFamily = {
    regular: "Roboto_400Regular",
    medium: "Roboto_500Medium",
    bold: "Roboto_700Bold",
}



Altere a fontFamily do text da index.js do tabs para ver no aplicativo a diferença



Copiar o arquivo (tabs)\index.js 3 vezes, renomeando as cópias o nome das funções e componente Text para:
  Arquivo:          Funções e Text
  messages.js       Messages
  profile.js        Profile
  search.js         Search



Criar um arquivo _layout.js na pasta (tabs):
import { Tabs } from "expo-router";

export default function TabLayout() {
 return (
   <Tabs screenOptions={{ headerShown: false }}>
        <Tabs.Screen name="index" />
        <Tabs.Screen name="search" />
        <Tabs.Screen name="messages" />
        <Tabs.Screen name="profile" />
    </Tabs>
  );
}



Ver funcionamento



Alterar o arquivo _layout.js da pasta (tabs):
import { Tabs } from "expo-router";
import { Foundation, Ionicons } from "@expo/vector-icons";

export default function TabLayout() {
  return (
    <Tabs screenOptions={{ headerShown: false, tabBarShowLabel: false }}>
      <Tabs.Screen
        name="index"
        options={{
          tabBarIcon: ({ size, color }) => <Foundation name="home" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="search"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="search" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="messages"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="chatbubble-ellipses" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="profile"
      />
    </Tabs>
  );
}



Ver funcionamento



Alterar o arquivo _layout.js da pasta (tabs):
import { Tabs } from "expo-router";
import { Ionicons } from "@expo/vector-icons";

import { theme } from '../../theme';

export default function TabLayout() {
  return (
    <Tabs screenOptions={{
      headerShown: false,
      tabBarShowLabel: false,
      tabBarActiveTintColor: theme.colors.white,
      tabBarInactiveTintColor: theme.colors.gray[700],
      tabBarStyle: {
        backgroundColor: theme.colors.black,
        borderColor: theme.colors.black,
      }
    }}>
      <Tabs.Screen
        name="index"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="home" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="search"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="search" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="messages"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="chatbubble-ellipses" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="profile"
      />
    </Tabs>
  );
}



Criar na pasta src uma pasta components, dentro da pasta criar um arquivo Avatar/index.js:
import { Image } from 'react-native';
import { styles } from './styles';

export default function Avatar({ imageUrl }) {
	const imageSource = imageUrl ? { uri: imageUrl } : require('../../../assets/icon.png');
	return (
		<Image style={styles.image} source={imageSource} />
	)
}



Criar na pasta Avatar um arquivo styles.js:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  image: {
    width: 30,
    height: 30,
    borderRadius: 25,
  }
});



Alterar o código da tab de Profile no arquivo (tabs)\_layout.js (Não esquecer do import do componente Avatar):
      <Tabs.Screen
        name="profile"
        options={{
          tabBarIcon: () => (
            <Avatar imageUrl="https://github.com/gallojunior.png"/>
          )
        }}
      />



Para estilizar o avatar:
Avatar\styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  image: {
    width: 30,
    height: 30,
    borderRadius: 25,
  },
  selected: {
    borderWidth: 3,
    borderColor: theme.colors.white,
  }
});



Avatar\index.js:
import { Image } from 'react-native';
import { styles } from './styles';

export default function Avatar({ selected, imageUrl }) {
  const imageSource = imageUrl ? { uri: imageUrl } : require('../../../assets/icon.png');
  return (
    <Image
      style={[styles.image, selected && styles.selected]}
      source={imageSource}
    />
  )
}


(tabs)\_layout.js:
  <Tabs.Screen
    name="profile"
    options={{
      tabBarIcon: ({ color }) => (
        <Avatar
          selected={color == theme.colors.white}
          imageUrl="https://github.com/gallojunior.png"
        />
      )
    }}
  />



Verificar funcionamento



Criar na pasta components um arquivo Filter/index.js:
import React from 'react'
import { View, Text, Pressable } from 'react-native'


export default function Filter({ title, selected }) {
  return <Pressable>
    <Text>{title}</Text>
  </Pressable>
}



Criar na pasta Filter um arquivo styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: {}
});



Alterar (tabs)\index.js:
import React from 'react';
import { View, StyleSheet } from 'react-native';

import { theme } from '../../theme';
import { Filter } from '../../components/Filter';

export function Home() {
  return (
    <View style={styles.container}>
      <Filter title={"Todos"} selected={true}/>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.black,
    padding: 12,
    paddingTop: 52,
  },
});



Ver funcionamento



Alterar no componente Filter/styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  pressable: {

  },
  text: {
    color: theme.colors.white,
    fontSize: 16,
    fontFamily: theme.fontFamily.medium,
  },
  selected: {
    borderBottomWidth: 4,
    borderBottomColor: theme.colors.white
  }
});



Alterar no componente Filter/index.js:
import React from 'react'
import { View, Text, Pressable } from 'react-native'

import { styles } from './styles';

export default function Filter({ title, selected }) {
  return <Pressable style={[styles.pressable, styles.selected]}>
    <Text style={styles.text}>{title}</Text>
  </Pressable>
}



Ver funcionamento



Criar na pasta src um arquivo utils/filters.js:
export const FILTERS = [
    "Tudo",
    "UI Clone",
    "Setup",
    "Gamer",
    "Escritório",
    "Casa",
    "Mobile",
    "Inspirações",
    "Interfaces"
]



Criar na pasta components um arquivo Filters/index.js:
import React from 'react';
import { FlatList } from 'react-native';

import { FILTERS } from '../../utils/filters';
import { Filter } from '../Filter';

export function Filters() {
  return <FlatList
    data={FILTERS}
    keyExtractor={item => item}
    renderItem={({item}) => <Filter title={item} />}
  />
}



Alterar (tabs)\index.js:
import React from 'react';
import { View, StyleSheet } from 'react-native';

import { theme } from '../../theme';
import { Filters } from '../../components/Filters';

export function Home() {
  return (
    <View style={styles.container}>
      <Filters/>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.black,
    padding: 12,
    paddingTop: 52,
  },
});



Ver funcionamento



Criar na pasta Filters um arquivo styles.js:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
    list: {
        paddingBottom: 4,
        maxHeight: 35,
    },
    content: {
        gap: 24,
        paddingHorizontal: 8,
    }
});



Alterar o arquivo (tabs)\index.js:
import React, { useState } from 'react';
import { View, StyleSheet } from 'react-native';

import { theme } from '../../theme';
import { Filters } from '../../components/Filters';
import { FILTERS } from '../../utils/filters';

export default function Home() {
  const [filter, setFilter] = useState(FILTERS[0]);

  return (
    <View style={styles.container}>
      <Filters filters={FILTERS} selected={filter} onChange={setFilter} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.black,
    padding: 12,
    paddingTop: 52,
  },
});



Alterar o arquivo Filters\index.js:
import React from 'react';
import { FlatList } from 'react-native';

import { styles } from './styles';
import { Filter } from '../Filter';

export function Filters({ filters, selected, onChange }) {
  return <FlatList
    data={filters}
    keyExtractor={item => item}
    renderItem={({ item }) => (
      <Filter
        title={item}
        selected={item == selected}
        onPress={() => onChange(item)}
      />
    )}
    horizontal
    style={styles.list}
    showsHorizontalScrollIndicator={false}
    contentContainerStyle={styles.content}
  />
}



Alterar o arquivo Filter\index.js:
import React from 'react'
import { View, Text, Pressable } from 'react-native'

import { styles } from './styles';

export function Filter({ title, selected, onPress }) {
  return <Pressable style={[styles.pressable, selected && styles.selected]} onPress={onPress}>
    <Text style={styles.text}>{title}</Text>
  </Pressable>
}



Site do componente: https://ui.gorhom.dev/components/bottom-sheet/

Executar no terminal:
  npm i @gorhom/bottom-sheet@^4



Criar na pasta components um arquivo Menu/index.js:
import { View, Text } from 'react-native';

export function Menu() {
  return (
    <View>
      <Text>Comece a criar agora</Text>
    </View>
  );
}



Criar na pasta (tabs) um arquivo menu.js:
export default function Menu() {
 return 
}



Alterar o arquivo (tabs)\_layout.js:
import { Tabs } from "expo-router";
import { Ionicons, FontAwesome5 } from "@expo/vector-icons";

import { theme } from '../../theme';
import { Avatar } from "../../components/Avatar";

export default function TabLayout() {
  return (
    <Tabs screenOptions={{
      headerShown: false,
      tabBarShowLabel: false,
      tabBarActiveTintColor: theme.colors.white,
      tabBarInactiveTintColor: theme.colors.gray[700],
      tabBarStyle: {
        backgroundColor: theme.colors.black,
        borderColor: theme.colors.black,
      }
    }}>
      <Tabs.Screen
        name="index"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="home" size={size} color={color} />
        }}
      />

      <Tabs.Screen
        name="search"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="search" size={size} color={color} />
        }}
      />

      <Tabs.Screen
        name="menu"
        options={{
          tabBarIcon: ({ size, color }) => <FontAwesome5 name="plus" size={size} color={color} />
        }}
        listeners={() => ({
          tabPress: (event) => {
            event.preventDefault();
            console.warn("CLICOU EM ADICIONAR!");
          }
        })}
      />

      <Tabs.Screen
        name="messages"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="chatbubble-ellipses" size={size} color={color} />
        }}
      />

      <Tabs.Screen
        name="profile"
        options={{
          tabBarIcon: ({ color }) => (
            <Avatar
              selected={color == theme.colors.white}
              imageUrl="https://github.com/gallojunior.png"
            />
          )
        }}
      />
    </Tabs>
  );
}



Ver funcionamento



Alterar o arquivo Menu\index.js: 
import { View, Text } from 'react-native';
import BottomSheet from '@gorhom/bottom-sheet';

export function Menu() {
  return (
    <BottomSheet index={0} snapPoints={[0.01, 230]}>
      <View>
        <Text>Comece a criar agora</Text>
      </View>
    </BottomSheet>
  );
}


Criar na pasta Menu um arquivo styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: { },
  content: {
    height: 300,
    width: "100%",
    backgroundColor: theme.colors.white,
  },
  title: {
    color: theme.colors.white,
    fontSize: 18,
    fontFamily: theme.fontFamily.medium,
  },
});




Alterar o arquivo (tabs)\_layout.js:
import React, { useRef } from "react";
import { Tabs } from "expo-router";
import BottomSheet from '@gorhom/bottom-sheet';
import { Ionicons, FontAwesome5 } from "@expo/vector-icons";

import { theme } from "../../theme";
import { Menu } from "../../components/Menu";
import { Avatar }  from "../../components/Avatar";
import { View } from "react-native";

export default function TabLayout() {
  const bottomSheetRef = useRef(null);
  const handleBottomSheetOpen = () => bottomSheetRef.current?.expand();
  const handleBottomSheetClose = () => bottomSheetRef.current?.snapToIndex(0);
  return (
    <View style={{ flex: 1 }}>
      <Tabs screenOptions={{
        headerShown: false,
        tabBarShowLabel: false,
        tabBarActiveTintColor: theme.colors.white,
        tabBarInactiveTintColor: theme.colors.gray[700],
        tabBarStyle: {
          backgroundColor: theme.colors.black,
          borderColor: theme.colors.black,
        }
      }}>
        <Tabs.Screen
          name="index"
          options={{
            tabBarIcon: ({ size, color }) => <Ionicons name="home" size={size} color={color} />
          }}
        />

        <Tabs.Screen
          name="search"
          options={{
            tabBarIcon: ({ size, color }) => <Ionicons name="search" size={size} color={color} />
          }}
        />

        <Tabs.Screen
          name="menu"
          options={{
            tabBarIcon: ({ size, color }) => <FontAwesome5 name="plus" size={size} color={color} />
          }}
          listeners={() => ({
            tabPress: (event) => {
              event.preventDefault();
              handleBottomSheetOpen();
            }
          })}
        />

        <Tabs.Screen
          name="messages"
          options={{
            tabBarIcon: ({ size, color }) => <Ionicons name="chatbubble-ellipses" size={size} color={color} />
          }}
        />

        <Tabs.Screen
          name="profile"
          options={{
            tabBarIcon: ({ color }) => (
              <Avatar
                selected={color == theme.colors.white}
                imageUrl="https://github.com/gallojunior.png"
              />
            )
          }}
        />
      </Tabs>
      <Menu ref={bottomSheetRef} onClose={handleBottomSheetClose}/>
    </View>
  );
}



Alterar o arquivo Menu\index.js:
import { forwardRef } from 'react';
import { View, Text } from 'react-native';
import BottomSheet from '@gorhom/bottom-sheet';
import { FontAwesome } from "@expo/vector-icons";

export const Menu = forwardRef(function Menu(props, ref) {
  const { onClose, ...otherProps } = props;
  return (
    <BottomSheet ref={ref} index={0} snapPoints={[0.01, 230]}>
      <View>
        <FontAwesome name="close" size={24} onPress={onClose} />
        <Text>Comece a criar agora</Text>
      </View>
    </BottomSheet>
  )
});



Ver funcionamento



Alterar o arquivo Menu\index.js:
import { forwardRef } from 'react';
import { View, Text } from 'react-native';
import BottomSheet from '@gorhom/bottom-sheet';
import { FontAwesome } from "@expo/vector-icons";

import { styles } from './styles';

export const Menu = forwardRef(function Menu(props, ref) {
  const { onClose, ...otherProps } = props;
  return (
    <BottomSheet
      ref={ref}
      index={0}
      snapPoints={[0.01, 230]}
      backgroundStyle={styles.container}
      handleComponent={() => null}
    >
      <View style={styles.content}>
        <View style={styles.header}>
          <Text style={styles.title}>Comece a criar agora</Text>
          <FontAwesome name="close" size={24} onPress={onClose} style={styles.close}/>
        </View>
      </View>
    </BottomSheet>
  )
});



Criar na pasta Menu um arquivo styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: {
    backgroundColor: theme.colors.gray[800],
  },
  content: {
    flex: 1,
    padding: 24,
    alignItems: 'center',
  },
  header: {
    flexDirection: "row",
  },
  title: {
    fontSize: 18,
    fontFamily: theme.fontFamily.medium,
    color: theme.colors.white,
    flex: 1,
    textAlign: 'center',
    marginLeft: 24
  },
  close: {
    color: theme.colors.white,
  }
});



Ver funcionamento



Criar na pasta components um arquivo MenuButton/index.js:
import { Pressable, View, Text } from 'react-native';
import { FontAwesome } from "@expo/vector-icons";

import { styles } from './styles';

export function MenuButton({ title, icon, onClick }) {
  return (
    <Pressable style={styles.container} onPress={onClick}>
      <View style={styles.boxIcon}>
        <FontAwesome name={icon} style={styles.icon} />
      </View>
      <Text style={styles.text}>{title}</Text>
    </Pressable>
  );
}



Criar na pasta MenuButton um arquivo styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  boxIcon: {
    backgroundColor: theme.colors.gray[700],
    padding: 24,
    borderRadius: 22,
    alignItems: 'center',
    justifyContent: 'center',
    width: 85,
  },
  icon: {
    color: theme.colors.white,
    fontSize: 32,
  },
  text: {
    color: theme.colors.white,
    fontSize: 14,
    fontFamily: theme.fontFamily.medium,
    marginTop: 10,
  },
})



Alterar na pasta Menu o arquivo index.js:
import { forwardRef } from 'react';
import { View, Text } from 'react-native';
import BottomSheet from '@gorhom/bottom-sheet';
import { FontAwesome } from "@expo/vector-icons";

import { styles } from './styles';
import { MenuButton } from '../MenuButton';

export const Menu = forwardRef(function Menu(props, ref) {
  const { onClose, ...otherProps } = props;
  return (
    <BottomSheet
      ref={ref}
      index={0}
      snapPoints={[0.01, 230]}
      backgroundStyle={styles.container}
      handleComponent={() => null}
    >
      <View style={styles.content}>
        <View style={styles.header}>
          <Text style={styles.title}>Comece a criar agora</Text>
          <FontAwesome name="close" size={24} onPress={onClose} style={styles.close}/>
        </View>
        <View style={styles.options}>
          <MenuButton title="Pin" icon="thumb-tack" onClick={() => console.info("Pin")} />
          <MenuButton title="Colagem" icon="paste" onClick={() => console.info("Colagem")}/>
          <MenuButton title="Pasta" icon="folder" onClick={() => console.info("Pasta")}/>
        </View>
      </View>
    </BottomSheet>
  )
});



Alterar na pasta Menu o arquivo styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: {
    backgroundColor: theme.colors.gray[800],
  },
  content: {
    flex: 1,
    padding: 24,
    alignItems: 'center',
  },
  header: {
    flexDirection: "row",
  },
  title: {
    fontSize: 18,
    fontFamily: theme.fontFamily.medium,
    color: theme.colors.white,
    flex: 1,
    textAlign: 'center',
    marginLeft: 24
  },
  close: {
    color: theme.colors.white,
  },
  options: {
    flexDirection: 'row',
    gap: 16,
    marginTop: 32
  }
});



Criar na pasta utils o arquivo posts.js:
export const POSTS = [
    {
        id: 1,
        title: "Home Office Guy",
        image: "https://images.pexels.com/photos/5318967/pexels-photo-5318967.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    },
    {
        id: 2,
        title: "Home Office",
        image: "https://images.pexels.com/photos/56759/pexels-photo-56759.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    },
    {
        id: 3,
        title: "Mobile Hello",
        image: "https://images.pexels.com/photos/699122/pexels-photo-699122.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    },
    {
        id: 4,
        title: "Mobile Street View",
        image: "https://images.pexels.com/photos/799443/pexels-photo-799443.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    },
    {
        id: 5,
        title: "Gamer Setup",
        image: "https://images.pexels.com/photos/3165335/pexels-photo-3165335.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    },
    {
        id: 6,
        title: "Gamer Life",
        image: "https://images.pexels.com/photos/7047010/pexels-photo-7047010.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    },
    
]



Criar na pasta components o arquivo Posts\index.js:
import { View } from 'react-native';
import { styles } from './styles';

export function Posts() {
  return (
    <View>
    </View>
  );
}



Criar na pasta Posts o arquivo styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: {
  },
})



Duplicar a pasta Posts e renomear a nova pasta para Post



Alterar o código do arquivo Post\index.js:
import { View, Image, Text } from 'react-native';
import { Feather } from '@expo/vector-icons';

import { styles } from './styles';
import { theme } from '../../theme';

export function Post({ id, title, image}) {
  return (
    <View style={styles.container}>
      <Image source={{ uri: image }} style={styles.image}/>
      <View style={styles.footer}>
        <Text style={styles.title}>{title}</Text>
        <Feather name='more-horizontal' size={16} color={theme.colors.white}/>
      </View>
    </View>
  );
}



Alterar o código do arquivo Post\styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: {
  },
  image: {
    width: '100%',
    height: 200,
    borderRadius: 22
  },
  title: {
    fontSize: 14,
    color: theme.colors.white,
    fontFamily: theme.fontFamily.bold,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 7,
  }
})



Alterar o código do arquivo Posts\index.js:
import { View } from 'react-native';
import { styles } from './styles';

import { Post } from '../Post';

export function Posts({ posts }) {
  return (
    <View>
      <Post title={posts[0].title} image={posts[0].image} />
    </View>
  );
}



Alterar o código do arquivo (tabs)\index.js:
import React, { useState } from 'react';
import { View, StyleSheet } from 'react-native';

import { theme } from '../../theme';
import { Filters } from '../../components/Filters';
import { FILTERS } from '../../utils/filters';
import { Posts } from '../../components/Posts';
import { POSTS } from '../../utils/posts';

export default function Home() {
  const [filter, setFilter] = useState(FILTERS[0]);

  return (
    <View style={styles.container}>
      <Filters filters={FILTERS} selected={filter} onChange={setFilter} />
      <Posts posts={POSTS} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.black,
    padding: 12,
    paddingTop: 52,
  },
});



Ver funcionamento


Alterar o código do arquivo Posts\index.js:
import { View } from 'react-native';
import { ScrollView } from 'react-native-gesture-handler';
import { styles } from './styles';

import { Post } from '../Post';

export function Posts({ posts }) {
  return (
    <ScrollView showsVerticalScrollIndicator={false}>
      <View>
        {
          posts.map((post) => (
            <Post key={post.id} id={post.id} title={post.title} image={post.image} />
          ))
        }
        {/* <Post title={posts[0].title} image={posts[0].image} /> */}
      </View>
    </ScrollView>
  );
}



Ver funcionamento



Alterar o código do arquivo Post\index.js:
import { View, Image, Text } from 'react-native';
import { Feather } from '@expo/vector-icons';

import { styles } from './styles';
import { theme } from '../../theme';

export function Post({ post }) {
  return (
    <View style={styles.container}>
      <Image source={{ uri: post.image }} style={styles.image}/>
      <View style={styles.footer}>
        <Text style={styles.title}>{post.title}</Text>
        <Feather name='more-horizontal' size={16} color={theme.colors.white}/>
      </View>
    </View>
  );
}



Alterar o código do arquivo Posts\index.js:
import { View } from 'react-native';
import { ScrollView } from 'react-native-gesture-handler';
import { styles } from './styles';

import { Post } from '../Post';

export function Posts({ posts }) {

  function postsByColumn(column: "right" | "left") {
    const rest = column === "left" ? 0 : 1;
    return posts.filter((_, index) => index % 2 === rest).map((post) =>
      <Post
        key={post.id}
        post={post}
      />);
  }

  return (
    <ScrollView showsVerticalScrollIndicator={false}>
      <View>
        {postsByColumn("left")}
      </View>
      
    </ScrollView>
  );
}



Ver funcionamento: Sumiram alguns posts, pq agora a renderização é por coluna, já vamos adicionar a coluna da direita



Alterar o arquivo Posts\index.js:
import { View } from 'react-native';
import { ScrollView } from 'react-native-gesture-handler';
import { styles } from './styles';

import { Post } from '../Post';

export function Posts({ posts }) {

  function postsByColumn(column) {
    const rest = column === "left" ? 0 : 1;
    return posts.filter((_, index) => index % 2 === rest).map((post) =>
      <Post
        key={post.id}
        post={post}
      />);
  }

  return (
    <ScrollView
      showsVerticalScrollIndicator={false}
      contentContainerStyle={styles.list}
    >
      <View style={styles.container}>
        <View style={styles.column}>{postsByColumn("left")}</View>
        <View style={styles.column}>{postsByColumn("right")}</View>
      </View>
    </ScrollView>
  );
}



Alterar o arquivo Posts\styles.js:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
  },
  column: {
    flex: 1,
  },
  list: {
    paddingTop: 16,
  }
})



Alterar o arquivo Post\index.js:
import { View, Image, Text } from 'react-native';
import { Feather } from '@expo/vector-icons';

import { styles } from './styles';
import { theme } from '../../theme';
import { useEffect, useState } from 'react';

export function Post({ post }) {
  const [aspectRatio, setAspectRatio] = useState(1);

  useEffect(() => {
    if (post.image) {
      Image.getSize(post.image, (width, height) => {
        setAspectRatio(width / height);
      });
    }
  }, [])

  return (
    <View style={styles.container}>

      <Image
        source={{ uri: post.image }}
        style={[styles.image, {aspectRatio}]}
      />

      <View style={styles.footer}>
        <Text style={styles.title}>{post.title}</Text>
        <Feather name='more-horizontal' size={16} color={theme.colors.white} />
      </View>
    </View>
  );
}



Alterar o arquivo styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  container: {
    padding: 5,
    paddingVertical: 15
  },
  image: {
    borderRadius: 22
  },
  title: {
    fontSize: 14,
    color: theme.colors.white,
    fontFamily: theme.fontFamily.bold,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 7,
  }
})



Ver funcionando


Criar uma pasta assets em src e dentro colocar o logo da aplicação



Executar no terminal:
  npm i moti --legacy-peer-deps
  npx expo install expo-linear-gradient


Criar um arquivo index.js dentro da pasta app:
import { useEffect } from 'react';
import { theme } from '../theme';
import { StyleSheet, View, useWindowDimensions } from 'react-native';
import { Skeleton } from "moti/skeleton";
import { router } from "expo-router";

import Animated, { SlideInDown, useAnimatedStyle, useSharedValue, withSequence, withTiming, runOnJS } from 'react-native-reanimated';

export default function Splash() {
  const imageSrc = require('../assets/logo.png');
  const logoScale = useSharedValue(1);
  const logoPositionY = useSharedValue(0);
  const contentDisplay = useSharedValue(0);

  const dimensions = useWindowDimensions();

  const skeletonColors = [
    theme.colors.gray[600],
    theme.colors.gray[700],
    theme.colors.gray[600],
  ]

  const logoAnimatedStyles = useAnimatedStyle(() => ({
    transform: [
      { scale: logoScale.value },
      { translateY: logoPositionY.value }
    ],
  }));

  const contentAnimatedStyles = useAnimatedStyle(() => ({
    display: contentDisplay.value === 1 ? 'flex' : 'none',

  }));

  function logoAnimation() {
    logoScale.value = withSequence(
      withTiming(0.7),
      withTiming(1.3),
      withTiming(1, undefined, (finished) => {
        if (finished) {
          logoPositionY.value = withSequence(
            withTiming(50, undefined, () => contentDisplay.value = 1),
            withTiming(-dimensions.height, { duration: 600 })
          )
          runOnJS(onEndSplash)()
        }
      }),
    );
  }

  function filters() {
    return Array.from({ length: 10 }).map((_, index) => (
      <Skeleton key={index} width={60} height={26} radius={6} colors={skeletonColors} />
    ))
  }

  function boxes(column) {
    const rest = column === "left" ? 0 : 1;
    return Array.from({ length: 20 }).filter((_, index) => index % 2 === rest)
      .map((_, index) => {
        const height = index % 2 === (column === "left" ? 0 : 1) ? 200 : 300
        return (
          <Animated.View key={index} style={[styles.box, { height }]}
          >
            <Skeleton colors={skeletonColors} width="100%" height={height} />
          </Animated.View>
        )
      });
  }

  function onEndSplash() {
    setTimeout(() => {
      router.push("/(tabs)")
    }, 2000)
  }

  useEffect(() => {
    logoAnimation()
  }, []);

  return (
    <View style={styles.container}>
      <Animated.Image
        source={imageSrc}
        style={[styles.logo, logoAnimatedStyles]}
      />

      <Animated.View
        style={[styles.content, contentAnimatedStyles]}
        entering={SlideInDown.duration(800)}
      >
        <View style={styles.header}>{filters()}</View>

        <View style={styles.boxes}>
          <View style={styles.column}>{boxes("left")}</View>
          <View style={styles.column}>{boxes("right")}</View>
        </View>
      </Animated.View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.black,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 12,
  },
  logo: {
    width: 64,
    height: 64
  },
  header: {
    width: "100%",
    flexDirection: 'row',
    gap: 16,
    paddingBottom: 12,
  },
  boxes: {
    flex: 1,
    width: "100%",
    flexDirection: 'row',
    gap: 12,
  },
  box: {
    width: "100%",
    backgroundColor: theme.colors.gray[600],
    borderRadius: 16,
  },
  column: {
    flex: 1,
    gap: 12,
  },
  content: {
    flex: 1,
    width: "100%",
  }
});