Executar em caso de problemas de execução do projeto:    

    Caso necessário, verificar o IP do computador pelo terminal com o comando:
    ipconfig

    Anotar o IP de rede e navegar no terminal até a pasta
    c:\windows\system32

    Executar o comando:
    setx /M REACT_NATIVE_PACKAGER_HOSTNAME <ip>


https://docs.expo.dev/develop/user-interface/splash-screen/#make-a-splash-image


Iniciando o projeto
npx create-expo-app rooster-interest
cd rooster-interest
npm i @react-navigation/native
npm i @react-navigation/bottom-tabs
npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar



package.json:
{
  "main": "expo-router/entry"
}



app.config:
{
  "scheme": "rooster-scheme"
}



Clique para criar um arquivo e digite: src\app\(tabs)\index.js:
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function Home() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home</Text>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    fontSize: 22,
  }
});



Alterar o arquivo splash.png da pasta assets



Alterar no arquivo app.json:
  "backgroundColor": "#000000"



npx expo start --localhost --android



Apagar o arquivo App.js



Criar dentro da pasta src uma pasta theme e na pasta um arquivo colors.js:
export const colors = {
    white: "#FFFFFF",
    black: "#000000",
    gray: {
        800: "#292929",
        700: "#4B4B4B",
        600: "#8E8E8E",
    }
}



Criar na pasta theme um arquivo fontFamily.js:
export const fontFamily = {
    regular: "",
    medium: "",
    bold: "",
}



Criar em theme um arquivo index.js:
import { colors } from "./colors";
import { fontFamily } from "./fontFamily";

export const theme = {
    colors,
    fontFamily,
}



Altere o (tabs)\index.js:
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { View, Text, StyleSheet } from 'react-native';

import { theme } from '../../theme';

export default function Home() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.black,
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: theme.colors.white,
    fontSize: 24
  }
});



Verificar as alterações em execução



Pare a execução do projeto (Ctrl + C) e execute no terminal:
npx expo install expo-font @expo-google-fonts/roboto

npx expo install react-native-gesture-handler react-native-reanimated

npm install -D @babel/plugin-transform-export-namespace-from



Alterar o arquivo babel.config.js:
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      "@babel/plugin-transform-export-namespace-from",
      "react-native-reanimated/plugin",
    ],
  };
};



Criar um arquivo _layout.js na pasta app:
import { Slot } from "expo-router";
import { StatusBar } from "react-native";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import * as SplashScreen from "expo-splash-screen";

import {
    useFonts,
    Roboto_400Regular,
    Roboto_500Medium,
    Roboto_700Bold
} from "@expo-google-fonts/roboto";

SplashScreen.preventAutoHideAsync();

export default function Layout() {
    const [fontsLoaded] = useFonts({
        Roboto_400Regular,
        Roboto_500Medium,
        Roboto_700Bold
    })

    if (fontsLoaded) {
        SplashScreen.hideAsync();
    }
    
    return (
        <GestureHandlerRootView style={{ flex: 1}}>
            <StatusBar barStyle="light-content" />
            {fontsLoaded && <Slot /> }
        </GestureHandlerRootView>
    )
}



Atualizar o código do arquivo fontFamily.cs:
export const fontFamily = {
    regular: "Roboto_400Regular",
    medium: "Roboto_500Medium",
    bold: "Roboto_700Bold",
}



Altere a fontFamily do text da index.js do tabs para ver no aplicativo a diferença



Copiar o arquivo (tabs)\index.js 3 vezes, renomeando as cópias o nome das funções e componente Text para:
  Arquivo:          Funções e Text
  messages.js       Messages
  profile.js        Profile
  search.js         Search



Criar um arquivo _layout.js na pasta (tabs):
import { Tabs } from "expo-router";

export default function TabLayout() {
 return (
   <Tabs screenOptions={{ headerShown: false }}>
        <Tabs.Screen name="index" />
        <Tabs.Screen name="search" />
        <Tabs.Screen name="messages" />
        <Tabs.Screen name="profile" />
    </Tabs>
  );
}



Ver funcionamento



Alterar o arquivo _layout.js da pasta (tabs):
import { Tabs } from "expo-router";
import { Foundation, Ionicons } from "@expo/vector-icons";

export default function TabLayout() {
  return (
    <Tabs screenOptions={{ headerShown: false, tabBarShowLabel: false }}>
      <Tabs.Screen
        name="index"
        options={{
          tabBarIcon: ({ size, color }) => <Foundation name="home" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="search"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="search" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="messages"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="chatbubble-ellipses" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="profile"
      />
    </Tabs>
  );
}



Ver funcionamento



Alterar o arquivo _layout.js da pasta (tabs):
import { Tabs } from "expo-router";
import { Ionicons } from "@expo/vector-icons";

import { theme } from '../../theme';

export default function TabLayout() {
  return (
    <Tabs screenOptions={{
      headerShown: false,
      tabBarShowLabel: false,
      tabBarActiveTintColor: theme.colors.white,
      tabBarInactiveTintColor: theme.colors.gray[700],
      tabBarStyle: {
        backgroundColor: theme.colors.black,
        borderColor: theme.colors.black,
      }
    }}>
      <Tabs.Screen
        name="index"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="home" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="search"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="search" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="messages"
        options={{
          tabBarIcon: ({ size, color }) => <Ionicons name="chatbubble-ellipses" size={size} color={color} />
        }}
      />
      <Tabs.Screen
        name="profile"
      />
    </Tabs>
  );
}



Criar na pasta src uma pasta components, dentro da pasta criar um arquivo Avatar/index.js:
import { Image } from 'react-native';
import { styles } from './styles';

export default function Avatar({ imageUrl }) {
	const imageSource = imageUrl ? { uri: imageUrl } : require('../../../assets/icon.png');
	return (
		<Image style={styles.image} source={imageSource} />
	)
}



Criar na pasta Avatar um arquivo styles.js:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  image: {
    width: 30,
    height: 30,
    borderRadius: 25,
  }
});



Alterar o código da tab de Profile no arquivo (tabs)\_layout.js (Não esquecer do import do componente Avatar):
      <Tabs.Screen
        name="profile"
        options={{
          tabBarIcon: () => (
            <Avatar imageUrl="https://github.com/gallojunior.png"/>
          )
        }}
      />



Para estilizar o avatar:
styles.js:
import { StyleSheet } from 'react-native';
import { theme } from '../../theme';

export const styles = StyleSheet.create({
  image: {
    width: 30,
    height: 30,
    borderRadius: 25,
  },
  selected: {
    borderWidth: 3,
    borderColor: theme.colors.white,
  }
});



index.js:
import { Image } from 'react-native';
import { styles } from './styles';

export default function Avatar({ selected, imageUrl }) {
  const imageSource = imageUrl ? { uri: imageUrl } : require('../../../assets/icon.png');
  return (
    <Image
      style={[styles.image, selected && styles.selected]}
      source={imageSource}
    />
  )
}


      <Tabs.Screen
        name="profile"
        options={{
          tabBarIcon: ({ color }) => (
            <Avatar
              selected={color == theme.colors.white}
              imageUrl="https://github.com/gallojunior.png"
            />
          )
        }}
      />








